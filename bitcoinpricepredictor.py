# -*- coding: utf-8 -*-
"""BitcoinPricePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12KgkTIj_-vNBHfoYBlueLYDAAXciQXAE

1. Import Libraires
"""

import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from tensorflow.keras.layers import Embedding, Dense, LSTM
from tensorflow.keras.models import Sequential
from tensorflow.keras.losses import BinaryCrossentropy
from tensorflow.keras.optimizers import Adam

from keras.layers import Dropout
from keras.layers import Dense

"""2. Importing Data"""



from google.colab import files
uploaded = files.upload()

data = pd.read_csv (r'BTC-USD.csv')
data=data.dropna(0)
print (data)

"""3. Split origianl data into training and testing data



"""

data_training = data[data['Date']<'2021-01-01']
print (data_training)

data_test=  data[data['Date']>='2021-01-01'].copy()
print (data_test)

"""4) Drop irrelavant data for the neural network"""

training_data= data_training.drop(['Date', 'Adj Close'], axis = 1)
training_data.head()

testing_data= data_test.drop(['Date','Adj Close'], axis= 1)
testing_data.head()

scaler = MinMaxScaler(feature_range=(0,1))
training_data = scaler.fit_transform(training_data)

scaler = MinMaxScaler(feature_range=(0,1))
testing_data = scaler.fit_transform(testing_data)

"""5) Create X and Y training lists and add data into the list"""

X_train= []
y_train= []

X_test= []
y_test=[]

print(training_data.shape[0])

print(testing_data.shape[0])

for i in range(60, training_data.shape[0]):
  X_train.append(training_data[i-60:i])# Append the all the values for every 59 days
  y_train.append(training_data[i,0]) # Append all the opening values for every day

for i in range(60, testing_data.shape[0]):
  X_test.append(testing_data[i-60:i])# Append the all the values for every 59 days
  y_test.append(testing_data[i,0]) # Append all the opening values for every day

"""6) Convert Lists into Arrays"""

X_train= np.array(X_train)
y_train= np.array(y_train)

X_test= np.array(X_test)
y_test= np.array(y_test)

print(X_train.shape)
print(y_train.shape)

"""7) Create LSTM MODEL"""

additional_metrics = ['accuracy']

"""8)Define LSTM Model"""

model = Sequential()
model.add(LSTM(50, input_shape=(X_train.shape[1],5),return_sequences=True, activation='relu'))
model.add(Dropout(0.2))
model.add(LSTM(60, return_sequences=True, activation='relu'))
model.add(Dropout(0.2))
model.add(LSTM(80, return_sequences=True, activation='relu'))
model.add(Dropout(0.2))
model.add(LSTM(120, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(1))

"""9) Prepare to compile your model by adding the proper functions"""

model.compile(loss="mean_squared_error", optimizer="adam")

model.summary()

history = model.fit(X_train, y_train, batch_size=60, epochs=10,validation_split=0.20)

test_results = model.evaluate(X_train, y_train, verbose=False)

print( test_results)

y_prediction= model.predict(X_test, verbose=False)

scale=1/2.59364857e-05

y_prediction= scale*y_prediction

y_test= scale*y_test



#np.set_printoptions(formatter={'float_kind':'{y_prediction:f}'.format})

#np.set_printoptions(formatter={'float_kind':'{y_test:f}'.format})

fig, ax = plt.subplots(figsize=(16,8))
ax.ticklabel_format(useOffset=False)
plt.plot(y_test, color='red', label= 'Actual Price of Bitcoin')
plt.plot(y_prediction, color='blue', label= 'Predicted Price of Bitcoin')
plt.title('Bitcoin Price Predictor')
plt.xlabel('Time')
plt.ylabel('Bitcoin Price in USD')
plt.legend()
plt.show()